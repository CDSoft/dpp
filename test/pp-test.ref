% PP test file
% Christophe Delord
% Saturday 23 April 2016

[pp-ref.md]: pp-ref.md

Introduction
============

This document is a test file for `pp`.
It is preprocessed and compared with [pp-ref.md].

The document also computes the test results.

    
   





Macros definition
=================

Definition:                         OK
Its definition is correct:          OK
Its evaluation is correct:          OK

Test of an undefined macro:         OK
Evaluation of an undefined macro:   OK

Definition with arguments:          OK
Its definition is correct:          OK
Its evaluation is correct:          OK

Undefinition:                       OK

Definition test:                    OK
Definition test:                    OK
Definition test:                    OK
Definition test:                    OK
Undefinition test:                  OK
Undefinition test:                  OK
Undefinition test:                  OK
Undefinition test:                  OK

  
Equality test:                      OK
Equality test:                      OK
Equality test:                      OK
Equality test:                      OK
Inequality test:                    OK
Inequality test:                    OK
Inequality test:                    OK
Inequality test:                    OK

Raw text:                           OK (should not evaluated: \swap(a)(b))

File inclusion
==============

Inclusion of `pp-test.i`:

File name of the main file:         OK
File name of the current file:      OK
First line of the included file.
File name of the main file:         OK
File name of the included file:     OK
Definitions:                        OK
Last line of the included file.

Definitions:                        OK

Files can also be included without being preprocessed:
Undefinition:                       OK
First line of the included file.
File name of the main file:         \eq(\main)(test/pp-test.md)
File name of the included file:     \eq(\file)(test/pp-test.i)
Definitions:                        \def(answer)(42)\eq(\answer)(42)
Last line of the included file.

No definitions:                     OK

File modification date
======================

Current file date:                  OK
Specific file date:                 OK

Environment variables
=====================

Environment variable:               OK

Simple arithmetic
=================

undefined + 1 = 1:                  OK
1 + 1 = 2:                          OK
undefined + 3 = 3:                  OK
3 + 4 = 7:                          OK

Output language and output format
=================================

The current language is "en":       OK
Section in english:                 OK
Section in french:                  OK

The current format is HTML:         OK
Section for an HTML document:       OK
Section for a PDF document:         OK

External commands and scripts execution
=======================================

Command line (current shell):       OK
`sh` script:                        OK
`bash` script:                      OK
`bat` script:                       OK
`python` script:                    OK
`haskell` script:                   OK

Diagrams
========

Diagrams test do not check the generated image, just the link in the output document.

![Test of dot](img/dot-test.png)
![Test of neato](img/neato-test.png)
![Test of twopi](img/twopi-test.png)
![Test of circo](img/circo-test.png)
![Test of fdp](img/fdp-test.png)
![Test of sfdp](img/patchwork-test.png)
![Test of osage](img/osage-test.png)

![Test of uml](img/uml-test.png)

![Test of ditaa](img/ditaa-test.png)

Literate programming
====================

Lets write and test a useful library:

The `fib` function computes fibonacci numbers:

``````````````````````````````````````````````````````````````````````

    int fib(int n);

``````````````````````````````````````````````````````````````````````

``````````````````````````````````````````````````````````````````````

    int fib(int n)
    {
        return (n < 2) ? 1 : fib(n-1) + fib(n-2);
    }

``````````````````````````````````````````````````````````````````````


The fact function computes factorials:

``````````````````````````````````````````````````````````````````````

    int fact(int n);

``````````````````````````````````````````````````````````````````````

``````````````````````````````````````````````````````````````````````

    int fact(int n)
    {
        return (n <= 1) ? 1 : n * fact(n-1);
    }

``````````````````````````````````````````````````````````````````````


Some test of `mylib.c`:

``````````````````````````````````````````````````````````````````````

    #include <stdio.h>

    #include "mylib.h"

    int main(int argc, char *argv[])
    {
        int i;
        for (i = 1; i < argc; i++)
        {
            int n = atoi(argv[i]);
            printf("fact(%d) = %3d; fib(%d) = %3d\n", n, fact(n), n, fib(n));
        }
        return 0;
    }

``````````````````````````````````````````````````````````````````````







`mylibtest 0 1 2 3 4 5` outputs:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fact(0) =   1; fib(0) =   1
fact(1) =   1; fib(1) =   1
fact(2) =   2; fib(2) =   2
fact(3) =   6; fib(3) =   3
fact(4) =  24; fib(4) =   5
fact(5) = 120; fib(5) =   8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mylibtest 0 1 2 3 4 5:     OK

Test results
============

Number of successful tests:     54
Number of failures:             0

All tests passed!
